{
  "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contractName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFunded",
          "type": "bool"
        }
      ],
      "name": "ContractFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contractName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "name": "OilContractAvail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractValue",
          "type": "uint256"
        }
      ],
      "name": "OilContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deedAmount",
          "type": "uint256"
        }
      ],
      "name": "OilContractDeedPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contractName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "name": "OilContractUnAvail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PaymentDispatched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractIdToNftAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "contractValue",
          "type": "uint256"
        }
      ],
      "name": "createOilContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        }
      ],
      "name": "dispatchPayments",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "getOilContract",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "available",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "totalValueLocked",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "funded",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nftIds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentId",
              "type": "uint256"
            }
          ],
          "internalType": "struct PetroStake.OilContract",
          "name": "_oilContract",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        }
      ],
      "name": "makeContractAvail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        }
      ],
      "name": "makeContractUnAvail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oilContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "nftIds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        }
      ],
      "name": "purchaseContractStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "5868fce29c5a578eca3662fe867a7004",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFunded\",\"type\":\"bool\"}],\"name\":\"ContractFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"name\":\"OilContractAvail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractValue\",\"type\":\"uint256\"}],\"name\":\"OilContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deedAmount\",\"type\":\"uint256\"}],\"name\":\"OilContractDeedPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"name\":\"OilContractUnAvail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PaymentDispatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractIdToNftAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contractValue\",\"type\":\"uint256\"}],\"name\":\"createOilContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"dispatchPayments\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"getOilContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftIds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"internalType\":\"struct PetroStake.OilContract\",\"name\":\"_oilContract\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"makeContractAvail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"makeContractUnAvail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oilContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftIds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"purchaseContractStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OilContractDeedPurchased(uint256,uint256,uint256)\":{\"details\":\"function will create Oil contract\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"createOilContract(string,uint256)\":{\"details\":\"function will create oil contract\",\"params\":{\"contractName\":\": the name of contract\",\"contractValue\":\": the total value of contract*\"}},\"dispatchPayments(uint256)\":{\"details\":\"functions dispatches and records payments to each ownerOf NFT associated with contract\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"makeContractAvail(uint256)\":{\"details\":\"makeContractAvail will make well contract avail to public to buyStakeInOilContract\"},\"makeContractUnAvail(uint256)\":{\"details\":\"makeContractUnAvail will make well contract avail to public to buyStakeInOilContract\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"purchaseContractStake(uint256)\":{\"details\":\"purchaseContractStake will update contracts and dispatch NFTS to funders\",\"params\":{\"contractId\":\": id of contract\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"swapRouter\":{\"details\":\"contracts which have been extended must have thir intializer/constructor invoked __{contractName}_init acts as a constructor param newOwner multsig wallet should be initialized as newOwner\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PetroStake.sol\":\"PetroStake\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x805b2b34d4829b892217e5116dc1feb9c67bee2eb7d7b18dac3dbbb91b13e9c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PetroStake.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n\\ncontract PetroStake is Initializable, UUPSUpgradeable, OwnableUpgradeable, ERC721Upgradeable {\\n\\tuint256 public contractIds;\\n\\tmapping(uint256 => OilContract) public oilContracts;\\n\\tmapping(bytes32 => mapping(uint256 => uint256)) public contractIdToNftAmount;\\n\\t/**\\n    * @dev contracts which have been extended must have thir intializer/constructor invoked\\n    __{contractName}_init acts as a constructor\\n    * @ param newOwner multsig wallet should be initialized as newOwner\\n     */\\n\\tISwapRouter public swapRouter;\\n\\taddress public USDC;\\n\\taddress public WETH;\\n\\t// For this example, we will set the pool fee to 0.3%.\\n\\tuint24 public constant poolFee = 3000;\\n\\tstruct OilContract {\\n\\t\\tuint256 id;\\n\\t\\tuint256 totalValue;\\n\\t\\tbytes32 name;\\n\\t\\tbool available;\\n\\t\\tuint256 totalValueLocked;\\n\\t\\tbool funded;\\n\\t\\tuint256 nftIds;\\n\\t\\tuint256 paymentId;\\n\\t\\t//payment dispatching should be indexedrather than saved onchain\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress newOwner,\\n\\t\\taddress _stableCoin,\\n\\t\\taddress _WETH,\\n\\t\\tISwapRouter _swapRouter\\n\\t) public initializer {\\n\\t\\t__UUPSUpgradeable_init();\\n\\t\\t__Ownable_init();\\n\\t\\t__ERC721_init(\\\"ArtPartitionTolerantStateDOA\\\", \\\"APTSD\\\");\\n\\t\\ttransferOwnership(newOwner);\\n\\t\\tswapRouter = _swapRouter;\\n\\t\\tUSDC = _stableCoin;\\n\\t\\tWETH = _WETH;\\n\\t}\\n\\n\\t/**\\n\\t * @dev function will create Oil contract\\n\\t */\\n\\tevent OilContractDeedPurchased(uint256 indexed contractId, uint256 indexed nftId, uint256 indexed deedAmount);\\n\\tevent OilContractCreated(uint256 indexed contractId, uint256 indexed contractValue);\\n\\tevent OilContractAvail(\\n\\t\\tuint256 indexed contractId,\\n\\t\\tbytes32 indexed contractName,\\n\\t\\tuint256 indexed contractValue,\\n\\t\\tbool available\\n\\t);\\n\\tevent OilContractUnAvail(\\n\\t\\tuint256 indexed contractId,\\n\\t\\tbytes32 indexed contractName,\\n\\t\\tuint256 indexed contractValue,\\n\\t\\tbool available\\n\\t);\\n\\tevent ContractFunded(\\n\\t\\tuint256 indexed contractId,\\n\\t\\tbytes32 indexed contractName,\\n\\t\\tuint256 indexed totalValueLocked,\\n\\t\\tbool isFunded\\n\\t);\\n\\tevent PaymentDispatched(uint256 indexed nftId, uint256 indexed paymentId, uint256 indexed paymentAmount, address owner);\\n\\n\\tfunction _createName(string calldata _name, uint256 _id) internal view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(_name, _id, address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @dev function will create oil contract\\n\\t * @param contractName: the name of contract\\n\\t * @param contractValue: the total value of contract\\n\\t **/\\n\\n\\tfunction createOilContract(string calldata contractName, uint256 contractValue) external onlyOwner {\\n\\t\\trequire(contractValue > 100000, \\\"Contract Value under 100000\\\");\\n\\t\\trequire(keccak256(abi.encodePacked(contractName)) != keccak256(abi.encodePacked(\\\"\\\")), \\\"Name required!\\\");\\n\\t\\tuint256 contractId = contractIds++;\\n\\t\\tOilContract memory oilContract;\\n\\t\\toilContract.id = contractId;\\n\\t\\toilContract.totalValue = contractValue;\\n\\t\\toilContract.name = _createName(contractName, contractId);\\n\\t\\toilContracts[contractId] = oilContract;\\n\\t\\temit OilContractCreated(contractId, contractValue);\\n\\t}\\n\\n\\t/**\\n\\t * @dev makeContractAvail will make well contract avail to public to buyStakeInOilContract\\n\\t */\\n\\tfunction makeContractAvail(uint256 contractId) external onlyOwner {\\n\\t\\tOilContract memory oilContract = oilContracts[contractId];\\n\\t\\trequire(oilContract.available == false, \\\"Oil contract not available\\\");\\n\\t\\toilContract.available = _changeAvailability(oilContract);\\n\\t\\trequire(oilContract.available, \\\"OilContract not made available\\\");\\n\\t\\temit OilContractAvail(oilContract.id, oilContract.name, oilContract.totalValue, oilContract.available);\\n\\t\\toilContracts[contractId] = oilContract;\\n\\t}\\n\\n\\tfunction _changeAvailability(OilContract memory oilContract) internal pure returns (bool) {\\n\\t\\toilContract.available = !oilContract.available;\\n\\t\\treturn oilContract.available;\\n\\t}\\n\\n\\t/**\\n\\t * @dev makeContractUnAvail will make well contract avail to public to buyStakeInOilContract\\n\\t */\\n\\tfunction makeContractUnAvail(uint256 contractId) external onlyOwner {\\n\\t\\tOilContract memory oilContract = oilContracts[contractId];\\n\\t\\trequire(oilContract.available, \\\"Contract already unavailable\\\");\\n\\t\\toilContract.available = _changeAvailability(oilContract);\\n\\t\\trequire(!oilContract.available, \\\"OilContract still available\\\");\\n\\t\\temit OilContractUnAvail(oilContract.id, oilContract.name, oilContract.totalValue, oilContract.available);\\n\\t\\toilContracts[contractId] = oilContract;\\n\\t}\\n\\n\\t/**\\n\\t * @dev purchaseContractStake will update contracts and dispatch NFTS to funders\\n\\t * @param contractId: id of contract\\n\\t */\\n\\t//considerations should be made for if we dont meet demand\\n\\tfunction purchaseContractStake(uint256 contractId) external payable {\\n\\t\\tOilContract memory oilContract = oilContracts[contractId];\\n\\t\\tuint256 availPurchaseAmount = oilContract.totalValue - oilContract.totalValueLocked;\\n\\t\\tuint256 usdcEthQuote = _getQuoterVal(msg.value);\\n\\t\\trequire(usdcEthQuote > availPurchaseAmount, \\\"Too much ether sent\\\");\\n\\t\\trequire(!oilContract.funded, \\\"Contract fully funded\\\");\\n\\t\\trequire(oilContract.available, \\\"Contract not available\\\");\\n\\n\\t\\tuint256 usdcAmount = _swapEthToStable();\\n\\n\\t\\tcontractIdToNftAmount[oilContract.name][oilContract.nftIds++] = usdcAmount;\\n\\n\\t\\toilContract.totalValueLocked += usdcAmount;\\n\\t\\temit OilContractDeedPurchased(oilContract.id, oilContract.nftIds, usdcAmount);\\n\\t\\tif (oilContract.totalValueLocked >= oilContract.totalValue) {\\n\\t\\t\\toilContract.funded = true;\\n\\t\\t\\toilContract.available = false;\\n\\t\\t\\temit ContractFunded(oilContract.id, oilContract.name, oilContract.totalValueLocked, oilContract.funded);\\n\\t\\t}\\n\\t\\t_dispatchNFT(msg.sender, oilContract.nftIds);\\n\\t\\toilContracts[contractId] = oilContract;\\n\\t}\\n\\n\\t/***\\n    @notice swapEthRoStable swaps a fixed amount of WETH (amountIn) for a maximum possible amount \\n\\tof USDC using uniswap router\\n   @return amountOut The amount of USDC received.\\n\\t\\n\\t */\\n\\tfunction _swapEthToStable() internal returns (uint256 usdcAmount) {\\n\\t\\tuint256 minUSDC = _getAmountOutMin();\\n\\t\\tISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n\\t\\t\\ttokenIn: WETH,\\n\\t\\t\\ttokenOut: USDC,\\n\\t\\t\\tfee: poolFee,\\n\\t\\t\\trecipient: address(this),\\n\\t\\t\\tdeadline: block.timestamp,\\n\\t\\t\\tamountIn: msg.value,\\n\\t\\t\\tamountOutMinimum: minUSDC,\\n\\t\\t\\tsqrtPriceLimitX96: 0\\n\\t\\t});\\n\\n\\t\\tusdcAmount = swapRouter.exactInputSingle(params);\\n\\t}\\n\\n\\tfunction _getQuoterVal(uint256 _eth) internal view returns (uint256 usdsQuote) {\\n\\t\\t//must fill function with uniswap quoter\\n\\t}\\n\\n\\tfunction _getAmountOutMin() internal view returns (uint256) {\\n\\t\\t//minAmount is product of offcahin rate\\n\\t\\t//In production, use an oracle or other data source to choose a safer value for amountOutMinimum.\\n\\t\\tuint256 oracleUSDPerEth = _getOracleRate(USDC, WETH);\\n\\t\\tuint256 usdcAmount = oracleUSDPerEth * msg.value;\\n\\t\\treturn usdcAmount;\\n\\t}\\n\\n\\tfunction _getOracleRate(address USDS, address _WETH) internal pure returns (uint256) {}\\n\\n\\t/**\\n\\t * @dev _updateContract increment contractNFTID, updates TVL, and adds newTokenId to mapping\\n\\t * @return newTokenId : the token ID to be passed into dispatchNFT internal function\\n\\t */\\n\\n\\t/** @dev function dispatches token using _safeMint, an internal function extended from 721Upgradeable */\\n\\tfunction _dispatchNFT(address to, uint256 nftId) internal {\\n\\t\\t//safeMint emits transfer event\\n\\t\\t_safeMint(to, nftId); //NEED META DATA\\n\\t\\t//tokenURI requirment will involve erc721uristorage rather than regular erc721\\n\\t\\t//_setTokenUri(nftId, tokenURI)\\n\\t}\\n\\n\\t/**\\n\\t * @dev functions dispatches and records payments to each ownerOf NFT associated with contract\\n\\t */\\n\\tfunction dispatchPayments(uint256 contractId) external payable onlyOwner {\\n\\t\\tOilContract memory oilContract = oilContracts[contractId];\\n\\t\\trequire(oilContract.funded, \\\"contract must me funded\\\");\\n\\t\\toilContracts[contractId] = _dispatchPayments(oilContract);\\n\\t}\\n\\n\\t/**\\n\\t* @dev function iterates through nftId's, dispatches payment to ownerOf nft, records Payment receipt\\n    consider putting in reentrancy guard as contract will continue to execute as itteration continues through nftId's\\n    * @param oilContract: oilContract with which to dispatch payments\\n     */\\n\\t//instead of dispatching payment to wallet\\n\\t//pay into oilContract\\n\\t//let owner of nft pull payments from contract\\n\\t//or instantiate new literal contract/ with address for each oil contract\\n\\t//dispatch payents to each oil contract\\n\\t//let nft owners pull payment from each oil contract address\\n\\tfunction _dispatchPayments(OilContract memory oilContract) internal returns (OilContract memory) {\\n\\t\\tfor (uint256 nftId = 1; nftId <= oilContract.nftIds; nftId++) {\\n\\t\\t\\tuint256 paymentId = oilContract.paymentId++; //function increments paymentIDs\\n\\t\\t\\taddress nftOwner = ownerOf(nftId);\\n\\t\\t\\tuint256 paymentDue = _calculatePayment(nftId, oilContract.name, oilContract.totalValue);\\n\\t\\t\\t(bool success, ) = payable(nftOwner).call{ value: paymentDue }(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"PaymentError\\\");\\n\\t\\t\\temit PaymentDispatched(nftId, paymentId, paymentDue, nftOwner);\\n\\t\\t}\\n\\t\\treturn oilContract;\\n\\t}\\n\\n\\t/**\\n\\t * @dev function calculates payment die to an ownerOf nft associated with contract\\n\\t * @param nftId: uint identifier associated with nft\\n\\t * @param contractName: encoded name of contract\\n\\t * @param contractVal: total value of contract\\n\\t */\\n\\tfunction _calculatePayment(\\n\\t\\tuint256 nftId,\\n\\t\\tbytes32 contractName,\\n\\t\\tuint256 contractVal\\n\\t) internal view returns (uint256 amountDue) {\\n\\t\\t//access nft  access deed, caliculate percentage of totalContractValue\\n\\t\\t//mapping(bytes32 => mapping(uint256 => uint256)) contractIdToNFT_Amount;\\n\\t\\tuint256 ownerStake = contractIdToNftAmount[contractName][nftId];\\n\\t\\tamountDue = _getAmountDue(ownerStake, contractVal);\\n\\t\\treturn amountDue;\\n\\t}\\n\\n\\t/**\\n\\t * @dev function calculates percentage of contract owned by ownerOf NFT, and determines amount due to ownerOf NFT\\n\\t * @param ownerStake: theamount of value the owner has in he oil contract\\n\\t * @param contractValue: the total value of the oil contract\\n\\t */\\n\\tfunction _getAmountDue(uint256 ownerStake, uint256 contractValue) private pure returns (uint256 amountDue) {\\n\\t\\tuint256 percentageOwed = _getBasis(ownerStake, contractValue);\\n\\t\\tamountDue = (percentageOwed * contractValue) / 10000;\\n\\t}\\n\\n\\tfunction _getBasis(uint256 _numerator, uint256 denominator) private pure returns (uint256 _basis) {\\n\\t\\t// caution, check safe-to-multiply here\\n\\t\\tuint256 numerator = _numerator * 10000;\\n\\t\\t// with rounding of last digit\\n\\t\\t_basis = numerator / denominator;\\n\\t\\t// 101 numeratr,450 denominator, 3 percision : will equal 224, i.e. 22.4%.\\n\\t\\treturn _basis;\\n\\t}\\n\\n\\tfunction getOilContract(uint256 _contractId) public view returns (OilContract memory _oilContract) {\\n\\t\\t_oilContract = _getOilContract(_contractId);\\n\\t}\\n\\n\\tfunction _getOilContract(uint256 _contractId) internal view returns (OilContract storage oilContract) {\\n\\t\\toilContract = oilContracts[_contractId];\\n\\t}\\n\\n\\tfunction getContractIds() external view returns (uint256) {\\n\\t\\treturn contractIds;\\n\\t}\\n\\n\\tfunction _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xc368c2b958cb50f74f1ef8d1ab337deeb480f80f0fac6a9813aa10d9a9caa422\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051612f8261004c60003960008181610aa201528181610ae201528181610dd301528181610e130152610ea60152612f826000f3fe6080604052600436106101f95760003560e01c806370a082311161010d5780639ab085eb116100a0578063c31c9c071161006f578063c31c9c0714610688578063c87b56dd146106a9578063e985e9c5146106c9578063f2fde38b14610713578063f8c8765e1461073357600080fd5b80639ab085eb14610607578063a22cb46514610627578063ad5c464814610647578063b88d4fde1461066857600080fd5b8063832e19fc116100dc578063832e19fc1461059357806389a30271146105b35780638da5cb5b146105d457806395d89b41146105f257600080fd5b806370a082311461050e578063715018a61461052e57806374171596146105435780637f673bcd1461055a57600080fd5b806338393927116101905780634f1ef2861161015f5780634f1ef2861461040457806352d1902d146104175780636352211e1461042c5780636511db9a1461044c57806366d6502f1461046c57600080fd5b8063383939271461039e5780633dbf90d8146103be57806342842e0e146103d157806347327a04146103f157600080fd5b8063089fe6aa116101cc578063089fe6aa14610312578063095ea7b31461033c57806323b872dd1461035e5780633659cfe61461037e57600080fd5b806301ffc9a7146101fe57806302c2ccfe1461023357806306fdde03146102b8578063081812fc146102da575b600080fd5b34801561020a57600080fd5b5061021e610219366004612741565b610753565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061025361024e36600461275e565b6107a5565b60405161022a91906000610100820190508251825260208301516020830152604083015160408301526060830151151560608301526080830151608083015260a0830151151560a083015260c083015160c083015260e083015160e083015292915050565b3480156102c457600080fd5b506102cd610824565b60405161022a91906127cf565b3480156102e657600080fd5b506102fa6102f536600461275e565b6108b6565b6040516001600160a01b03909116815260200161022a565b34801561031e57600080fd5b50610328610bb881565b60405162ffffff909116815260200161022a565b34801561034857600080fd5b5061035c6103573660046127f7565b610950565b005b34801561036a57600080fd5b5061035c610379366004612823565b610a66565b34801561038a57600080fd5b5061035c610399366004612864565b610a97565b3480156103aa57600080fd5b5061012d545b60405190815260200161022a565b61035c6103cc36600461275e565b610b77565b3480156103dd57600080fd5b5061035c6103ec366004612823565b610c3d565b61035c6103ff36600461275e565b610c58565b61035c610412366004612924565b610dc8565b34801561042357600080fd5b506103b0610e99565b34801561043857600080fd5b506102fa61044736600461275e565b610f4c565b34801561045857600080fd5b5061035c61046736600461275e565b610fc3565b34801561047857600080fd5b506104d161048736600461275e565b61012e602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939460ff9384169492939091169188565b6040805198895260208901979097529587019490945291151560608601526080850152151560a084015260c083015260e08201526101000161022a565b34801561051a57600080fd5b506103b0610529366004612864565b6111cc565b34801561053a57600080fd5b5061035c611253565b34801561054f57600080fd5b506103b061012d5481565b34801561056657600080fd5b506103b0610575366004612974565b61012f60209081526000928352604080842090915290825290205481565b34801561059f57600080fd5b5061035c6105ae36600461275e565b611289565b3480156105bf57600080fd5b50610131546102fa906001600160a01b031681565b3480156105e057600080fd5b506097546001600160a01b03166102fa565b3480156105fe57600080fd5b506102cd611417565b34801561061357600080fd5b5061035c610622366004612996565b611426565b34801561063357600080fd5b5061035c610642366004612a0e565b6115f8565b34801561065357600080fd5b50610132546102fa906001600160a01b031681565b34801561067457600080fd5b5061035c610683366004612a4c565b611603565b34801561069457600080fd5b50610130546102fa906001600160a01b031681565b3480156106b557600080fd5b506102cd6106c436600461275e565b61163b565b3480156106d557600080fd5b5061021e6106e4366004612ab8565b6001600160a01b0391821660009081526101006020908152604080832093909416825291909152205460ff1690565b34801561071f57600080fd5b5061035c61072e366004612864565b611723565b34801561073f57600080fd5b5061035c61074e366004612ae6565b6117bb565b60006001600160e01b031982166380ac58cd60e01b148061078457506001600160e01b03198216635b5e139f60e01b145b8061079f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107ad612646565b600082815261012e6020526040902060408051610100810182528254815260018301546020820152600283015491810191909152600382015460ff9081161515606083015260048301546080830152600583015416151560a0820152600682015460c082015260079091015460e082015292915050565b606060fb805461083390612b42565b80601f016020809104026020016040519081016040528092919081815260200182805461085f90612b42565b80156108ac5780601f10610881576101008083540402835291602001916108ac565b820191906000526020600020905b81548152906001019060200180831161088f57829003601f168201915b5050505050905090565b600081815260fd60205260408120546001600160a01b03166109345760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815260ff60205260409020546001600160a01b031690565b600061095b82610f4c565b9050806001600160a01b0316836001600160a01b031614156109c95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161092b565b336001600160a01b03821614806109e557506109e581336106e4565b610a575760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161092b565b610a61838361192d565b505050565b610a70338261199b565b610a8c5760405162461bcd60e51b815260040161092b90612b7d565b610a61838383611a93565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ae05760405162461bcd60e51b815260040161092b90612bce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b29600080516020612f06833981519152546001600160a01b031690565b6001600160a01b031614610b4f5760405162461bcd60e51b815260040161092b90612c1a565b610b5881611c2f565b60408051600080825260208201909252610b7491839190611c59565b50565b600081815261012e60209081526040808320815161010081018352815481526001820154938101849052600282015492810192909252600381015460ff908116151560608401526004820154608084018190526005830154909116151560a0840152600682015460c084015260079091015460e0830152909291610bfb9190612c7c565b9050600060405162461bcd60e51b8152602060048201526013602482015272151bdbc81b5d58da08195d1a195c881cd95b9d606a1b604482015260640161092b565b610a6183838360405180602001604052806000815250611603565b6097546001600160a01b03163314610c825760405162461bcd60e51b815260040161092b90612cc6565b600081815261012e602090815260409182902082516101008101845281548152600182015492810192909252600281015492820192909252600382015460ff9081161515606083015260048301546080830152600583015416151560a08201819052600683015460c083015260079092015460e082015290610d465760405162461bcd60e51b815260206004820152601760248201527f636f6e7472616374206d757374206d652066756e646564000000000000000000604482015260640161092b565b610d4f81611dd3565b600092835261012e602090815260409384902082518155908201516001820155928101516002840155606081015160038401805491151560ff199283161790556080820151600485015560a08201516005850180549115159190921617905560c0810151600684015560e0015160079092019190915550565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e115760405162461bcd60e51b815260040161092b90612bce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e5a600080516020612f06833981519152546001600160a01b031690565b6001600160a01b031614610e805760405162461bcd60e51b815260040161092b90612c1a565b610e8982611c2f565b610e9582826001611c59565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f395760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161092b565b50600080516020612f0683398151915290565b600081815260fd60205260408120546001600160a01b03168061079f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161092b565b6097546001600160a01b03163314610fed5760405162461bcd60e51b815260040161092b90612cc6565b600081815261012e602090815260409182902082516101008101845281548152600182015492810192909252600281015492820192909252600382015460ff9081161580156060840152600484015460808401526005840154909116151560a0830152600683015460c083015260079092015460e0820152906110b25760405162461bcd60e51b815260206004820152601a60248201527f4f696c20636f6e7472616374206e6f7420617661696c61626c65000000000000604482015260640161092b565b60608101805115908190526111095760405162461bcd60e51b815260206004820152601e60248201527f4f696c436f6e7472616374206e6f74206d61646520617661696c61626c650000604482015260640161092b565b8060200151816040015182600001517fcdf5315a6404ee58823ce72b01b68dfa189d5937e23cab1a9460ae5634ccbcf1846060015160405161114f911515815260200190565b60405180910390a4600091825261012e602090815260409283902082518155908201516001820155918101516002830155606081015160038301805491151560ff199283161790556080820151600484015560a08201516005840180549115159190921617905560c0810151600683015560e00151600790910155565b60006001600160a01b0382166112375760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161092b565b506001600160a01b0316600090815260fe602052604090205490565b6097546001600160a01b0316331461127d5760405162461bcd60e51b815260040161092b90612cc6565b6112876000611f15565b565b6097546001600160a01b031633146112b35760405162461bcd60e51b815260040161092b90612cc6565b600081815261012e602090815260409182902082516101008101845281548152600182015492810192909252600281015492820192909252600382015460ff908116151560608301819052600484015460808401526005840154909116151560a0830152600683015460c083015260079092015460e0820152906113795760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420616c726561647920756e617661696c61626c6500000000604482015260640161092b565b6060810180511590819052156113d15760405162461bcd60e51b815260206004820152601b60248201527f4f696c436f6e7472616374207374696c6c20617661696c61626c650000000000604482015260640161092b565b8060200151816040015182600001517f82989c3046930173307063a6708895208e2577b62c02baa1b241aa881700672e846060015160405161114f911515815260200190565b606060fc805461083390612b42565b6097546001600160a01b031633146114505760405162461bcd60e51b815260040161092b90612cc6565b620186a081116114a25760405162461bcd60e51b815260206004820152601b60248201527f436f6e74726163742056616c756520756e646572203130303030300000000000604482015260640161092b565b60408051600081526020810180835281519020916114c4918691869101612cfb565b6040516020818303038152906040528051906020012014156115195760405162461bcd60e51b815260206004820152600e60248201526d4e616d652072657175697265642160901b604482015260640161092b565b61012d80546000918261152b83612c93565b919050559050611539612646565b8181526020810183905261154e858584611f67565b6040808301918252600084815261012e60209081528282208551815590850151600182015592516002840155606084015160038401805491151560ff199283161790556080850151600485015560a08501516005850180549115159190921617905560c0840151600684015560e084015160079093019290925551849184917faa700fccc6e67c270f4396cdf84d6e72b175a957b12814191db44e67944ec2b49190a35050505050565b610e95338383611f9f565b61160d338361199b565b6116295760405162461bcd60e51b815260040161092b90612b7d565b6116358484848461206f565b50505050565b600081815260fd60205260409020546060906001600160a01b03166116ba5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161092b565b60006116d160408051602081019091526000815290565b905060008151116116f1576040518060200160405280600081525061171c565b806116fb846120a2565b60405160200161170c929190612d0b565b6040516020818303038152906040525b9392505050565b6097546001600160a01b0316331461174d5760405162461bcd60e51b815260040161092b90612cc6565b6001600160a01b0381166117b25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161092b565b610b7481611f15565b600054610100900460ff166117d65760005460ff16156117da565b303b155b61183d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161092b565b600054610100900460ff1615801561185f576000805461ffff19166101011790555b6118676121a0565b61186f6121c7565b6118cb6040518060400160405280601c81526020017f417274506172746974696f6e546f6c6572616e745374617465444f41000000008152506040518060400160405280600581526020016410541514d160da1b8152506121f6565b6118d485611723565b61013080546001600160a01b038085166001600160a01b03199283161790925561013180548784169083161790556101328054928616929091169190911790558015611926576000805461ff00191690555b5050505050565b600081815260ff6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061196282610f4c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260fd60205260408120546001600160a01b0316611a145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161092b565b6000611a1f83610f4c565b9050806001600160a01b0316846001600160a01b03161480611a5a5750836001600160a01b0316611a4f846108b6565b6001600160a01b0316145b80611a8b57506001600160a01b038082166000908152610100602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611aa682610f4c565b6001600160a01b031614611b0a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161092b565b6001600160a01b038216611b6c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161092b565b611b7760008261192d565b6001600160a01b038316600090815260fe60205260408120805460019290611ba0908490612c7c565b90915550506001600160a01b038216600090815260fe60205260408120805460019290611bce908490612cae565b9091555050600081815260fd602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6097546001600160a01b03163314610b745760405162461bcd60e51b815260040161092b90612cc6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c8c57610a6183612227565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc557600080fd5b505afa925050508015611cf5575060408051601f3d908101601f19168201909252611cf291810190612d3a565b60015b611d585760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161092b565b600080516020612f068339815191528114611dc75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161092b565b50610a618383836122c3565b611ddb612646565b60015b8260c001518111611f0e5760e083018051600091611dfb82612c93565b905290506000611e0a83610f4c565b90506000611e2184876040015188602001516122e8565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611e70576040519150601f19603f3d011682016040523d82523d6000602084013e611e75565b606091505b5050905080611eb55760405162461bcd60e51b815260206004820152600c60248201526b2830bcb6b2b73a22b93937b960a11b604482015260640161092b565b6040516001600160a01b03841681528290859087907f3601f858173b244b5ae6f21312dfd38c469eee052de08684514c444f0c4996dc9060200160405180910390a4505050508080611f0690612c93565b915050611dde565b5090919050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600083838330604051602001611f809493929190612d53565b6040516020818303038152906040528051906020012090509392505050565b816001600160a01b0316836001600160a01b031614156120015760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161092b565b6001600160a01b0383811660008181526101006020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61207a848484611a93565b61208684848484612316565b6116355760405162461bcd60e51b815260040161092b90612d7f565b6060816120c65750506040805180820190915260018152600360fc1b602082015290565b8160005b81156120f057806120da81612c93565b91506120e99050600a83612de7565b91506120ca565b60008167ffffffffffffffff81111561210b5761210b612881565b6040519080825280601f01601f191660200182016040528015612135576020820181803683370190505b5090505b8415611a8b5761214a600183612c7c565b9150612157600a86612dfb565b612162906030612cae565b60f81b81838151811061217757612177612e0f565b60200101906001600160f81b031916908160001a905350612199600a86612de7565b9450612139565b600054610100900460ff166112875760405162461bcd60e51b815260040161092b90612e25565b600054610100900460ff166121ee5760405162461bcd60e51b815260040161092b90612e25565b611287612423565b600054610100900460ff1661221d5760405162461bcd60e51b815260040161092b90612e25565b610e958282612453565b6001600160a01b0381163b6122945760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161092b565b600080516020612f0683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6122cc836124a1565b6000825111806122d95750805b15610a615761163583836124e1565b600082815261012f6020908152604080832086845290915281205461230d81846125cc565b95945050505050565b60006001600160a01b0384163b1561241857604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061235a903390899088908890600401612e8f565b602060405180830381600087803b15801561237457600080fd5b505af19250505080156123a4575060408051601f3d908101601f191682019092526123a191810190612ecc565b60015b6123fe573d8080156123d2576040519150601f19603f3d011682016040523d82523d6000602084013e6123d7565b606091505b5080516123f65760405162461bcd60e51b815260040161092b90612d7f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a8b565b506001949350505050565b600054610100900460ff1661244a5760405162461bcd60e51b815260040161092b90612e25565b61128733611f15565b600054610100900460ff1661247a5760405162461bcd60e51b815260040161092b90612e25565b815161248d9060fb906020850190612692565b508051610a619060fc906020840190612692565b6124aa81612227565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6125495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161092b565b600080846001600160a01b0316846040516125649190612ee9565b600060405180830381855af49150503d806000811461259f576040519150601f19603f3d011682016040523d82523d6000602084013e6125a4565b606091505b509150915061230d8282604051806060016040528060278152602001612f26602791396125f2565b6000806125d9848461262b565b90506127106125e88483612e70565b611a8b9190612de7565b6060831561260157508161171c565b8251156126115782518084602001fd5b8160405162461bcd60e51b815260040161092b91906127cf565b60008061263a84612710612e70565b9050611a8b8382612de7565b6040518061010001604052806000815260200160008152602001600080191681526020016000151581526020016000815260200160001515815260200160008152602001600081525090565b82805461269e90612b42565b90600052602060002090601f0160209004810192826126c05760008555612706565b82601f106126d957805160ff1916838001178555612706565b82800160010185558215612706579182015b828111156127065782518255916020019190600101906126eb565b50612712929150612716565b5090565b5b808211156127125760008155600101612717565b6001600160e01b031981168114610b7457600080fd5b60006020828403121561275357600080fd5b813561171c8161272b565b60006020828403121561277057600080fd5b5035919050565b60005b8381101561279257818101518382015260200161277a565b838111156116355750506000910152565b600081518084526127bb816020860160208601612777565b601f01601f19169290920160200192915050565b60208152600061171c60208301846127a3565b6001600160a01b0381168114610b7457600080fd5b6000806040838503121561280a57600080fd5b8235612815816127e2565b946020939093013593505050565b60008060006060848603121561283857600080fd5b8335612843816127e2565b92506020840135612853816127e2565b929592945050506040919091013590565b60006020828403121561287657600080fd5b813561171c816127e2565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126128a857600080fd5b813567ffffffffffffffff808211156128c3576128c3612881565b604051601f8301601f19908116603f011681019082821181831017156128eb576128eb612881565b8160405283815286602085880101111561290457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561293757600080fd5b8235612942816127e2565b9150602083013567ffffffffffffffff81111561295e57600080fd5b61296a85828601612897565b9150509250929050565b6000806040838503121561298757600080fd5b50508035926020909101359150565b6000806000604084860312156129ab57600080fd5b833567ffffffffffffffff808211156129c357600080fd5b818601915086601f8301126129d757600080fd5b8135818111156129e657600080fd5b8760208285010111156129f857600080fd5b6020928301989097509590910135949350505050565b60008060408385031215612a2157600080fd5b8235612a2c816127e2565b915060208301358015158114612a4157600080fd5b809150509250929050565b60008060008060808587031215612a6257600080fd5b8435612a6d816127e2565b93506020850135612a7d816127e2565b925060408501359150606085013567ffffffffffffffff811115612aa057600080fd5b612aac87828801612897565b91505092959194509250565b60008060408385031215612acb57600080fd5b8235612ad6816127e2565b91506020830135612a41816127e2565b60008060008060808587031215612afc57600080fd5b8435612b07816127e2565b93506020850135612b17816127e2565b92506040850135612b27816127e2565b91506060850135612b37816127e2565b939692955090935050565b600181811c90821680612b5657607f821691505b60208210811415612b7757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015612c8e57612c8e612c66565b500390565b6000600019821415612ca757612ca7612c66565b5060010190565b60008219821115612cc157612cc1612c66565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8183823760009101908152919050565b60008351612d1d818460208801612777565b835190830190612d31818360208801612777565b01949350505050565b600060208284031215612d4c57600080fd5b5051919050565b8385823790920190815260609190911b6bffffffffffffffffffffffff19166020820152603401919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612df657612df6612dd1565b500490565b600082612e0a57612e0a612dd1565b500690565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615612e8a57612e8a612c66565b500290565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ec2908301846127a3565b9695505050505050565b600060208284031215612ede57600080fd5b815161171c8161272b565b60008251612efb818460208701612777565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203eaf0a27a5758c7ff0ee2e21fe0ddbfbd69a6f56b64fd2f3e10048f76fae3f5c64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c806370a082311161010d5780639ab085eb116100a0578063c31c9c071161006f578063c31c9c0714610688578063c87b56dd146106a9578063e985e9c5146106c9578063f2fde38b14610713578063f8c8765e1461073357600080fd5b80639ab085eb14610607578063a22cb46514610627578063ad5c464814610647578063b88d4fde1461066857600080fd5b8063832e19fc116100dc578063832e19fc1461059357806389a30271146105b35780638da5cb5b146105d457806395d89b41146105f257600080fd5b806370a082311461050e578063715018a61461052e57806374171596146105435780637f673bcd1461055a57600080fd5b806338393927116101905780634f1ef2861161015f5780634f1ef2861461040457806352d1902d146104175780636352211e1461042c5780636511db9a1461044c57806366d6502f1461046c57600080fd5b8063383939271461039e5780633dbf90d8146103be57806342842e0e146103d157806347327a04146103f157600080fd5b8063089fe6aa116101cc578063089fe6aa14610312578063095ea7b31461033c57806323b872dd1461035e5780633659cfe61461037e57600080fd5b806301ffc9a7146101fe57806302c2ccfe1461023357806306fdde03146102b8578063081812fc146102da575b600080fd5b34801561020a57600080fd5b5061021e610219366004612741565b610753565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061025361024e36600461275e565b6107a5565b60405161022a91906000610100820190508251825260208301516020830152604083015160408301526060830151151560608301526080830151608083015260a0830151151560a083015260c083015160c083015260e083015160e083015292915050565b3480156102c457600080fd5b506102cd610824565b60405161022a91906127cf565b3480156102e657600080fd5b506102fa6102f536600461275e565b6108b6565b6040516001600160a01b03909116815260200161022a565b34801561031e57600080fd5b50610328610bb881565b60405162ffffff909116815260200161022a565b34801561034857600080fd5b5061035c6103573660046127f7565b610950565b005b34801561036a57600080fd5b5061035c610379366004612823565b610a66565b34801561038a57600080fd5b5061035c610399366004612864565b610a97565b3480156103aa57600080fd5b5061012d545b60405190815260200161022a565b61035c6103cc36600461275e565b610b77565b3480156103dd57600080fd5b5061035c6103ec366004612823565b610c3d565b61035c6103ff36600461275e565b610c58565b61035c610412366004612924565b610dc8565b34801561042357600080fd5b506103b0610e99565b34801561043857600080fd5b506102fa61044736600461275e565b610f4c565b34801561045857600080fd5b5061035c61046736600461275e565b610fc3565b34801561047857600080fd5b506104d161048736600461275e565b61012e602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939460ff9384169492939091169188565b6040805198895260208901979097529587019490945291151560608601526080850152151560a084015260c083015260e08201526101000161022a565b34801561051a57600080fd5b506103b0610529366004612864565b6111cc565b34801561053a57600080fd5b5061035c611253565b34801561054f57600080fd5b506103b061012d5481565b34801561056657600080fd5b506103b0610575366004612974565b61012f60209081526000928352604080842090915290825290205481565b34801561059f57600080fd5b5061035c6105ae36600461275e565b611289565b3480156105bf57600080fd5b50610131546102fa906001600160a01b031681565b3480156105e057600080fd5b506097546001600160a01b03166102fa565b3480156105fe57600080fd5b506102cd611417565b34801561061357600080fd5b5061035c610622366004612996565b611426565b34801561063357600080fd5b5061035c610642366004612a0e565b6115f8565b34801561065357600080fd5b50610132546102fa906001600160a01b031681565b34801561067457600080fd5b5061035c610683366004612a4c565b611603565b34801561069457600080fd5b50610130546102fa906001600160a01b031681565b3480156106b557600080fd5b506102cd6106c436600461275e565b61163b565b3480156106d557600080fd5b5061021e6106e4366004612ab8565b6001600160a01b0391821660009081526101006020908152604080832093909416825291909152205460ff1690565b34801561071f57600080fd5b5061035c61072e366004612864565b611723565b34801561073f57600080fd5b5061035c61074e366004612ae6565b6117bb565b60006001600160e01b031982166380ac58cd60e01b148061078457506001600160e01b03198216635b5e139f60e01b145b8061079f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107ad612646565b600082815261012e6020526040902060408051610100810182528254815260018301546020820152600283015491810191909152600382015460ff9081161515606083015260048301546080830152600583015416151560a0820152600682015460c082015260079091015460e082015292915050565b606060fb805461083390612b42565b80601f016020809104026020016040519081016040528092919081815260200182805461085f90612b42565b80156108ac5780601f10610881576101008083540402835291602001916108ac565b820191906000526020600020905b81548152906001019060200180831161088f57829003601f168201915b5050505050905090565b600081815260fd60205260408120546001600160a01b03166109345760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815260ff60205260409020546001600160a01b031690565b600061095b82610f4c565b9050806001600160a01b0316836001600160a01b031614156109c95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161092b565b336001600160a01b03821614806109e557506109e581336106e4565b610a575760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161092b565b610a61838361192d565b505050565b610a70338261199b565b610a8c5760405162461bcd60e51b815260040161092b90612b7d565b610a61838383611a93565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ae05760405162461bcd60e51b815260040161092b90612bce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b29600080516020612f06833981519152546001600160a01b031690565b6001600160a01b031614610b4f5760405162461bcd60e51b815260040161092b90612c1a565b610b5881611c2f565b60408051600080825260208201909252610b7491839190611c59565b50565b600081815261012e60209081526040808320815161010081018352815481526001820154938101849052600282015492810192909252600381015460ff908116151560608401526004820154608084018190526005830154909116151560a0840152600682015460c084015260079091015460e0830152909291610bfb9190612c7c565b9050600060405162461bcd60e51b8152602060048201526013602482015272151bdbc81b5d58da08195d1a195c881cd95b9d606a1b604482015260640161092b565b610a6183838360405180602001604052806000815250611603565b6097546001600160a01b03163314610c825760405162461bcd60e51b815260040161092b90612cc6565b600081815261012e602090815260409182902082516101008101845281548152600182015492810192909252600281015492820192909252600382015460ff9081161515606083015260048301546080830152600583015416151560a08201819052600683015460c083015260079092015460e082015290610d465760405162461bcd60e51b815260206004820152601760248201527f636f6e7472616374206d757374206d652066756e646564000000000000000000604482015260640161092b565b610d4f81611dd3565b600092835261012e602090815260409384902082518155908201516001820155928101516002840155606081015160038401805491151560ff199283161790556080820151600485015560a08201516005850180549115159190921617905560c0810151600684015560e0015160079092019190915550565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e115760405162461bcd60e51b815260040161092b90612bce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e5a600080516020612f06833981519152546001600160a01b031690565b6001600160a01b031614610e805760405162461bcd60e51b815260040161092b90612c1a565b610e8982611c2f565b610e9582826001611c59565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f395760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161092b565b50600080516020612f0683398151915290565b600081815260fd60205260408120546001600160a01b03168061079f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161092b565b6097546001600160a01b03163314610fed5760405162461bcd60e51b815260040161092b90612cc6565b600081815261012e602090815260409182902082516101008101845281548152600182015492810192909252600281015492820192909252600382015460ff9081161580156060840152600484015460808401526005840154909116151560a0830152600683015460c083015260079092015460e0820152906110b25760405162461bcd60e51b815260206004820152601a60248201527f4f696c20636f6e7472616374206e6f7420617661696c61626c65000000000000604482015260640161092b565b60608101805115908190526111095760405162461bcd60e51b815260206004820152601e60248201527f4f696c436f6e7472616374206e6f74206d61646520617661696c61626c650000604482015260640161092b565b8060200151816040015182600001517fcdf5315a6404ee58823ce72b01b68dfa189d5937e23cab1a9460ae5634ccbcf1846060015160405161114f911515815260200190565b60405180910390a4600091825261012e602090815260409283902082518155908201516001820155918101516002830155606081015160038301805491151560ff199283161790556080820151600484015560a08201516005840180549115159190921617905560c0810151600683015560e00151600790910155565b60006001600160a01b0382166112375760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161092b565b506001600160a01b0316600090815260fe602052604090205490565b6097546001600160a01b0316331461127d5760405162461bcd60e51b815260040161092b90612cc6565b6112876000611f15565b565b6097546001600160a01b031633146112b35760405162461bcd60e51b815260040161092b90612cc6565b600081815261012e602090815260409182902082516101008101845281548152600182015492810192909252600281015492820192909252600382015460ff908116151560608301819052600484015460808401526005840154909116151560a0830152600683015460c083015260079092015460e0820152906113795760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420616c726561647920756e617661696c61626c6500000000604482015260640161092b565b6060810180511590819052156113d15760405162461bcd60e51b815260206004820152601b60248201527f4f696c436f6e7472616374207374696c6c20617661696c61626c650000000000604482015260640161092b565b8060200151816040015182600001517f82989c3046930173307063a6708895208e2577b62c02baa1b241aa881700672e846060015160405161114f911515815260200190565b606060fc805461083390612b42565b6097546001600160a01b031633146114505760405162461bcd60e51b815260040161092b90612cc6565b620186a081116114a25760405162461bcd60e51b815260206004820152601b60248201527f436f6e74726163742056616c756520756e646572203130303030300000000000604482015260640161092b565b60408051600081526020810180835281519020916114c4918691869101612cfb565b6040516020818303038152906040528051906020012014156115195760405162461bcd60e51b815260206004820152600e60248201526d4e616d652072657175697265642160901b604482015260640161092b565b61012d80546000918261152b83612c93565b919050559050611539612646565b8181526020810183905261154e858584611f67565b6040808301918252600084815261012e60209081528282208551815590850151600182015592516002840155606084015160038401805491151560ff199283161790556080850151600485015560a08501516005850180549115159190921617905560c0840151600684015560e084015160079093019290925551849184917faa700fccc6e67c270f4396cdf84d6e72b175a957b12814191db44e67944ec2b49190a35050505050565b610e95338383611f9f565b61160d338361199b565b6116295760405162461bcd60e51b815260040161092b90612b7d565b6116358484848461206f565b50505050565b600081815260fd60205260409020546060906001600160a01b03166116ba5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161092b565b60006116d160408051602081019091526000815290565b905060008151116116f1576040518060200160405280600081525061171c565b806116fb846120a2565b60405160200161170c929190612d0b565b6040516020818303038152906040525b9392505050565b6097546001600160a01b0316331461174d5760405162461bcd60e51b815260040161092b90612cc6565b6001600160a01b0381166117b25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161092b565b610b7481611f15565b600054610100900460ff166117d65760005460ff16156117da565b303b155b61183d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161092b565b600054610100900460ff1615801561185f576000805461ffff19166101011790555b6118676121a0565b61186f6121c7565b6118cb6040518060400160405280601c81526020017f417274506172746974696f6e546f6c6572616e745374617465444f41000000008152506040518060400160405280600581526020016410541514d160da1b8152506121f6565b6118d485611723565b61013080546001600160a01b038085166001600160a01b03199283161790925561013180548784169083161790556101328054928616929091169190911790558015611926576000805461ff00191690555b5050505050565b600081815260ff6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061196282610f4c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260fd60205260408120546001600160a01b0316611a145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161092b565b6000611a1f83610f4c565b9050806001600160a01b0316846001600160a01b03161480611a5a5750836001600160a01b0316611a4f846108b6565b6001600160a01b0316145b80611a8b57506001600160a01b038082166000908152610100602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611aa682610f4c565b6001600160a01b031614611b0a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161092b565b6001600160a01b038216611b6c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161092b565b611b7760008261192d565b6001600160a01b038316600090815260fe60205260408120805460019290611ba0908490612c7c565b90915550506001600160a01b038216600090815260fe60205260408120805460019290611bce908490612cae565b9091555050600081815260fd602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6097546001600160a01b03163314610b745760405162461bcd60e51b815260040161092b90612cc6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c8c57610a6183612227565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc557600080fd5b505afa925050508015611cf5575060408051601f3d908101601f19168201909252611cf291810190612d3a565b60015b611d585760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161092b565b600080516020612f068339815191528114611dc75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161092b565b50610a618383836122c3565b611ddb612646565b60015b8260c001518111611f0e5760e083018051600091611dfb82612c93565b905290506000611e0a83610f4c565b90506000611e2184876040015188602001516122e8565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611e70576040519150601f19603f3d011682016040523d82523d6000602084013e611e75565b606091505b5050905080611eb55760405162461bcd60e51b815260206004820152600c60248201526b2830bcb6b2b73a22b93937b960a11b604482015260640161092b565b6040516001600160a01b03841681528290859087907f3601f858173b244b5ae6f21312dfd38c469eee052de08684514c444f0c4996dc9060200160405180910390a4505050508080611f0690612c93565b915050611dde565b5090919050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600083838330604051602001611f809493929190612d53565b6040516020818303038152906040528051906020012090509392505050565b816001600160a01b0316836001600160a01b031614156120015760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161092b565b6001600160a01b0383811660008181526101006020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61207a848484611a93565b61208684848484612316565b6116355760405162461bcd60e51b815260040161092b90612d7f565b6060816120c65750506040805180820190915260018152600360fc1b602082015290565b8160005b81156120f057806120da81612c93565b91506120e99050600a83612de7565b91506120ca565b60008167ffffffffffffffff81111561210b5761210b612881565b6040519080825280601f01601f191660200182016040528015612135576020820181803683370190505b5090505b8415611a8b5761214a600183612c7c565b9150612157600a86612dfb565b612162906030612cae565b60f81b81838151811061217757612177612e0f565b60200101906001600160f81b031916908160001a905350612199600a86612de7565b9450612139565b600054610100900460ff166112875760405162461bcd60e51b815260040161092b90612e25565b600054610100900460ff166121ee5760405162461bcd60e51b815260040161092b90612e25565b611287612423565b600054610100900460ff1661221d5760405162461bcd60e51b815260040161092b90612e25565b610e958282612453565b6001600160a01b0381163b6122945760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161092b565b600080516020612f0683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6122cc836124a1565b6000825111806122d95750805b15610a615761163583836124e1565b600082815261012f6020908152604080832086845290915281205461230d81846125cc565b95945050505050565b60006001600160a01b0384163b1561241857604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061235a903390899088908890600401612e8f565b602060405180830381600087803b15801561237457600080fd5b505af19250505080156123a4575060408051601f3d908101601f191682019092526123a191810190612ecc565b60015b6123fe573d8080156123d2576040519150601f19603f3d011682016040523d82523d6000602084013e6123d7565b606091505b5080516123f65760405162461bcd60e51b815260040161092b90612d7f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a8b565b506001949350505050565b600054610100900460ff1661244a5760405162461bcd60e51b815260040161092b90612e25565b61128733611f15565b600054610100900460ff1661247a5760405162461bcd60e51b815260040161092b90612e25565b815161248d9060fb906020850190612692565b508051610a619060fc906020840190612692565b6124aa81612227565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6125495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161092b565b600080846001600160a01b0316846040516125649190612ee9565b600060405180830381855af49150503d806000811461259f576040519150601f19603f3d011682016040523d82523d6000602084013e6125a4565b606091505b509150915061230d8282604051806060016040528060278152602001612f26602791396125f2565b6000806125d9848461262b565b90506127106125e88483612e70565b611a8b9190612de7565b6060831561260157508161171c565b8251156126115782518084602001fd5b8160405162461bcd60e51b815260040161092b91906127cf565b60008061263a84612710612e70565b9050611a8b8382612de7565b6040518061010001604052806000815260200160008152602001600080191681526020016000151581526020016000815260200160001515815260200160008152602001600081525090565b82805461269e90612b42565b90600052602060002090601f0160209004810192826126c05760008555612706565b82601f106126d957805160ff1916838001178555612706565b82800160010185558215612706579182015b828111156127065782518255916020019190600101906126eb565b50612712929150612716565b5090565b5b808211156127125760008155600101612717565b6001600160e01b031981168114610b7457600080fd5b60006020828403121561275357600080fd5b813561171c8161272b565b60006020828403121561277057600080fd5b5035919050565b60005b8381101561279257818101518382015260200161277a565b838111156116355750506000910152565b600081518084526127bb816020860160208601612777565b601f01601f19169290920160200192915050565b60208152600061171c60208301846127a3565b6001600160a01b0381168114610b7457600080fd5b6000806040838503121561280a57600080fd5b8235612815816127e2565b946020939093013593505050565b60008060006060848603121561283857600080fd5b8335612843816127e2565b92506020840135612853816127e2565b929592945050506040919091013590565b60006020828403121561287657600080fd5b813561171c816127e2565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126128a857600080fd5b813567ffffffffffffffff808211156128c3576128c3612881565b604051601f8301601f19908116603f011681019082821181831017156128eb576128eb612881565b8160405283815286602085880101111561290457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561293757600080fd5b8235612942816127e2565b9150602083013567ffffffffffffffff81111561295e57600080fd5b61296a85828601612897565b9150509250929050565b6000806040838503121561298757600080fd5b50508035926020909101359150565b6000806000604084860312156129ab57600080fd5b833567ffffffffffffffff808211156129c357600080fd5b818601915086601f8301126129d757600080fd5b8135818111156129e657600080fd5b8760208285010111156129f857600080fd5b6020928301989097509590910135949350505050565b60008060408385031215612a2157600080fd5b8235612a2c816127e2565b915060208301358015158114612a4157600080fd5b809150509250929050565b60008060008060808587031215612a6257600080fd5b8435612a6d816127e2565b93506020850135612a7d816127e2565b925060408501359150606085013567ffffffffffffffff811115612aa057600080fd5b612aac87828801612897565b91505092959194509250565b60008060408385031215612acb57600080fd5b8235612ad6816127e2565b91506020830135612a41816127e2565b60008060008060808587031215612afc57600080fd5b8435612b07816127e2565b93506020850135612b17816127e2565b92506040850135612b27816127e2565b91506060850135612b37816127e2565b939692955090935050565b600181811c90821680612b5657607f821691505b60208210811415612b7757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015612c8e57612c8e612c66565b500390565b6000600019821415612ca757612ca7612c66565b5060010190565b60008219821115612cc157612cc1612c66565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8183823760009101908152919050565b60008351612d1d818460208801612777565b835190830190612d31818360208801612777565b01949350505050565b600060208284031215612d4c57600080fd5b5051919050565b8385823790920190815260609190911b6bffffffffffffffffffffffff19166020820152603401919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612df657612df6612dd1565b500490565b600082612e0a57612e0a612dd1565b500690565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615612e8a57612e8a612c66565b500290565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ec2908301846127a3565b9695505050505050565b600060208284031215612ede57600080fd5b815161171c8161272b565b60008251612efb818460208701612777565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203eaf0a27a5758c7ff0ee2e21fe0ddbfbd69a6f56b64fd2f3e10048f76fae3f5c64736f6c63430008090033",
  "devdoc": {
    "events": {
      "OilContractDeedPurchased(uint256,uint256,uint256)": {
        "details": "function will create Oil contract"
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "createOilContract(string,uint256)": {
        "details": "function will create oil contract",
        "params": {
          "contractName": ": the name of contract",
          "contractValue": ": the total value of contract*"
        }
      },
      "dispatchPayments(uint256)": {
        "details": "functions dispatches and records payments to each ownerOf NFT associated with contract"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "makeContractAvail(uint256)": {
        "details": "makeContractAvail will make well contract avail to public to buyStakeInOilContract"
      },
      "makeContractUnAvail(uint256)": {
        "details": "makeContractUnAvail will make well contract avail to public to buyStakeInOilContract"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "purchaseContractStake(uint256)": {
        "details": "purchaseContractStake will update contracts and dispatch NFTS to funders",
        "params": {
          "contractId": ": id of contract"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "swapRouter": {
        "details": "contracts which have been extended must have thir intializer/constructor invoked __{contractName}_init acts as a constructor param newOwner multsig wallet should be initialized as newOwner"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4045,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4048,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4027,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4247,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7188,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 412,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 524,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8340,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5881,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_name",
        "offset": 0,
        "slot": "251",
        "type": "t_string_storage"
      },
      {
        "astId": 5883,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_symbol",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 5887,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_owners",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5891,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_balances",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5895,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5901,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6742,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "__gap",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 9099,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "contractIds",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 9104,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "oilContracts",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_uint256,t_struct(OilContract)9138_storage)"
      },
      {
        "astId": 9110,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "contractIdToNftAmount",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9114,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "swapRouter",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(ISwapRouter)8948"
      },
      {
        "astId": 9116,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "USDC",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 9118,
        "contract": "contracts/PetroStake.sol:PetroStake",
        "label": "WETH",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwapRouter)8948": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(OilContract)9138_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PetroStake.OilContract)",
        "numberOfBytes": "32",
        "value": "t_struct(OilContract)9138_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OilContract)9138_storage": {
        "encoding": "inplace",
        "label": "struct PetroStake.OilContract",
        "members": [
          {
            "astId": 9123,
            "contract": "contracts/PetroStake.sol:PetroStake",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9125,
            "contract": "contracts/PetroStake.sol:PetroStake",
            "label": "totalValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9127,
            "contract": "contracts/PetroStake.sol:PetroStake",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 9129,
            "contract": "contracts/PetroStake.sol:PetroStake",
            "label": "available",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 9131,
            "contract": "contracts/PetroStake.sol:PetroStake",
            "label": "totalValueLocked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9133,
            "contract": "contracts/PetroStake.sol:PetroStake",
            "label": "funded",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 9135,
            "contract": "contracts/PetroStake.sol:PetroStake",
            "label": "nftIds",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9137,
            "contract": "contracts/PetroStake.sol:PetroStake",
            "label": "paymentId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}